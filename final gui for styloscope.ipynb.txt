{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb9225d7-db2d-4e37-8550-13f4a05cb9cf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inputs: shirt, blue, formal, daily, fall, Body Type: average\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Swasti Negi\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inputs: sweater, red, formal, daily, fall, Body Type: average\n",
      "Inputs: jeans, red, formal, daily, fall, Body Type: average\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Swasti Negi\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\n",
      "  warnings.warn(\n",
      "C:\\Users\\Swasti Negi\\anaconda3\\Lib\\site-packages\\google\\protobuf\\symbol_database.py:55: UserWarning: SymbolDatabase.GetPrototype() is deprecated. Please use message_factory.GetMessageClass() instead. SymbolDatabase.GetPrototype() will be removed soon.\n",
      "  warnings.warn('SymbolDatabase.GetPrototype() is deprecated. Please '\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk\n",
    "from tkinter import messagebox\n",
    "import cv2\n",
    "from PIL import Image, ImageTk\n",
    "import joblib\n",
    "import mediapipe as mp\n",
    "import numpy as np\n",
    "\n",
    "# Load models and encoders\n",
    "try:\n",
    "    top_model = joblib.load('top_model.pkl')\n",
    "    bottom_model = joblib.load('bottom_model.pkl')\n",
    "    le_item_type = joblib.load('le_item_type.pkl')\n",
    "    le_color = joblib.load('le_color.pkl')\n",
    "    le_style = joblib.load('le_style.pkl')\n",
    "    le_occasion = joblib.load('le_occasion.pkl')\n",
    "    le_season = joblib.load('le_season.pkl')\n",
    "    le_body_type = joblib.load('le_body_type.pkl')\n",
    "    le_combination = joblib.load('le_combination.pkl')\n",
    "except FileNotFoundError as e:\n",
    "    print(f\"Model or encoder file not found: {e}\")\n",
    "    exit(1)\n",
    "\n",
    "# Initialize Mediapipe pose detection\n",
    "mp_pose = mp.solutions.pose\n",
    "mp_drawing = mp.solutions.drawing_utils\n",
    "\n",
    "class WardrobeApp:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Wardrobe Outfit Recommender\")\n",
    "        self.root.geometry(\"1200x600\")  # Wider window for side-by-side layout\n",
    "\n",
    "        # Load background image\n",
    "        self.bg_image = Image.open(\"full.jpg\")  # Use 'full.jpg' as the background image\n",
    "        self.bg_image = self.bg_image.resize((1200, 600), Image.Resampling.LANCZOS)  # Resize image to fit window\n",
    "        self.bg_photo = ImageTk.PhotoImage(self.bg_image)\n",
    "\n",
    "        # Create a label to display the background image\n",
    "        self.bg_label = tk.Label(self.root, image=self.bg_photo)\n",
    "        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)  # Stretch to cover the entire window\n",
    "\n",
    "        # Keep a reference to avoid garbage collection\n",
    "        self.bg_label.image = self.bg_photo\n",
    "\n",
    "        # Camera setup\n",
    "        self.cap = None\n",
    "        self.camera_running = False\n",
    "        self.pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)\n",
    "\n",
    "        # GUI Elements\n",
    "        self.create_widgets()\n",
    "\n",
    "        # Body type variable\n",
    "        self.body_type = \"average\"\n",
    "\n",
    "    def create_widgets(self):\n",
    "        # Configure grid layout\n",
    "        self.root.grid_columnconfigure(0, weight=1)  # For camera (left side)\n",
    "        self.root.grid_columnconfigure(1, weight=1)  # For inputs (right side)\n",
    "\n",
    "        # Heading at the top\n",
    "        heading_font = (\"Times New Roman\", 24, \"bold\", \"underline\")\n",
    "        heading_label = ttk.Label(self.root, text=\"Welcome to StyloScope\", font=heading_font, background=\"#ffffff\")\n",
    "        heading_label.grid(row=0, column=0, columnspan=2, pady=20)\n",
    "\n",
    "        # Create a frame with a border around the video feed\n",
    "        video_frame_box = tk.Frame(self.root, bd=5, relief=tk.SOLID, padx=10, pady=10)\n",
    "        video_frame_box.grid(row=1, column=0, rowspan=10, sticky=\"nsew\", padx=10, pady=10)\n",
    "\n",
    "        # Camera feed display (inside the video_frame_box)\n",
    "        self.video_frame = tk.Label(video_frame_box)\n",
    "        self.video_frame.grid(row=0, column=0, sticky=\"nsew\")\n",
    "\n",
    "        # Frame to group elements on the right side\n",
    "        frame = tk.Frame(self.root, bd=5, relief=tk.RIDGE, padx=10, pady=10)\n",
    "        frame.grid(row=1, column=1, rowspan=10, padx=20, pady=20, sticky=\"n\")\n",
    "\n",
    "        # Input fields and buttons (inside the frame)\n",
    "        label_font = (\"Times New Roman\", 12)\n",
    "        button_font = (\"Times New Roman\", 12, \"bold\")\n",
    "        output_font = (\"Times New Roman\", 16)\n",
    "\n",
    "        # Remove 'dress' if it exists in the item_type list\n",
    "        item_types = list(le_item_type.classes_)\n",
    "        if 'dress' in item_types:\n",
    "            item_types.remove('dress')\n",
    "\n",
    "        ttk.Label(frame, text=\"Item Type:\", font=label_font).grid(row=0, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.item_type_var = tk.StringVar()\n",
    "        self.item_type_menu = ttk.Combobox(frame, textvariable=self.item_type_var, state=\"readonly\", font=label_font)\n",
    "        self.item_type_menu['values'] = item_types  # Updated list without 'dress'\n",
    "        self.item_type_menu.grid(row=0, column=1, sticky=\"w\", padx=5, pady=5)\n",
    "\n",
    "        ttk.Label(frame, text=\"Color:\", font=label_font).grid(row=1, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.color_var = tk.StringVar()\n",
    "        self.color_menu = ttk.Combobox(frame, textvariable=self.color_var, state=\"readonly\", font=label_font)\n",
    "        self.color_menu['values'] = list(le_color.classes_)\n",
    "        self.color_menu.grid(row=1, column=1, sticky=\"w\", padx=5, pady=5)\n",
    "\n",
    "        ttk.Label(frame, text=\"Style:\", font=label_font).grid(row=2, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.style_var = tk.StringVar()\n",
    "        self.style_menu = ttk.Combobox(frame, textvariable=self.style_var, state=\"readonly\", font=label_font)\n",
    "        self.style_menu['values'] = list(le_style.classes_)\n",
    "        self.style_menu.grid(row=2, column=1, sticky=\"w\", padx=5, pady=5)\n",
    "\n",
    "        ttk.Label(frame, text=\"Occasion:\", font=label_font).grid(row=3, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.occasion_var = tk.StringVar()\n",
    "        self.occasion_menu = ttk.Combobox(frame, textvariable=self.occasion_var, state=\"readonly\", font=label_font)\n",
    "        self.occasion_menu['values'] = list(le_occasion.classes_)\n",
    "        self.occasion_menu.grid(row=3, column=1, sticky=\"w\", padx=5, pady=5)\n",
    "\n",
    "        ttk.Label(frame, text=\"Season:\", font=label_font).grid(row=4, column=0, sticky=\"e\", padx=5, pady=5)\n",
    "        self.season_var = tk.StringVar()\n",
    "        self.season_menu = ttk.Combobox(frame, textvariable=self.season_var, state=\"readonly\", font=label_font)\n",
    "        self.season_menu['values'] = list(le_season.classes_)\n",
    "        self.season_menu.grid(row=4, column=1, sticky=\"w\", padx=5, pady=5)\n",
    "\n",
    "        # Predict button\n",
    "        self.predict_button = tk.Button(frame, text=\"Predict Outfit\", font=button_font, command=self.predict_outfit)\n",
    "        self.predict_button.grid(row=5, column=0, columnspan=2, pady=10)\n",
    "\n",
    "        # Output display with Times New Roman and wrapped text\n",
    "        self.output_label = ttk.Label(frame, text=\"\", font=output_font, wraplength=400)\n",
    "        self.output_label.grid(row=6, column=0, columnspan=2, pady=10)\n",
    "\n",
    "        # Camera control buttons\n",
    "        self.start_camera_button = tk.Button(frame, text=\"Start Camera\", font=button_font, command=self.start_camera)\n",
    "        self.start_camera_button.grid(row=7, column=0, columnspan=2, pady=5)\n",
    "\n",
    "        self.stop_camera_button = tk.Button(frame, text=\"Stop Camera\", font=button_font, command=self.stop_camera)\n",
    "        self.stop_camera_button.grid(row=8, column=0, columnspan=2, pady=5)\n",
    "\n",
    "        # Quit button\n",
    "        self.quit_button = tk.Button(frame, text=\"Quit\", font=button_font, command=self.quit_app)\n",
    "        self.quit_button.grid(row=9, column=0, columnspan=2, pady=10)\n",
    "\n",
    "    def start_camera(self):\n",
    "        if not self.camera_running:\n",
    "            # Initialize the camera\n",
    "            self.cap = cv2.VideoCapture(0)\n",
    "            if not self.cap.isOpened():\n",
    "                messagebox.showerror(\"Camera Error\", \"Unable to access the camera.\")\n",
    "                return\n",
    "            self.camera_running = True\n",
    "            self.update_frame()\n",
    "\n",
    "    def stop_camera(self):\n",
    "        # Stop the camera\n",
    "        if self.camera_running:\n",
    "            self.camera_running = False\n",
    "            if self.cap:\n",
    "                self.cap.release()\n",
    "                self.cap = None\n",
    "            self.video_frame.config(image='')  # Clear the video frame\n",
    "            cv2.destroyAllWindows()\n",
    "\n",
    "    def update_frame(self):\n",
    "        if self.camera_running:\n",
    "            ret, frame = self.cap.read()\n",
    "            if ret:\n",
    "                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # Convert from BGR to RGB\n",
    "                results = self.pose.process(frame_rgb)\n",
    "\n",
    "                # Draw landmarks\n",
    "                mp_drawing.draw_landmarks(frame_rgb, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)\n",
    "\n",
    "                # Classify body type based on pose landmarks\n",
    "                if results.pose_landmarks:\n",
    "                    landmarks = results.pose_landmarks.landmark\n",
    "                    self.body_type = self.classify_body_type(landmarks)\n",
    "                    cv2.putText(frame_rgb, f'Body Type: {self.body_type}', (10, 30),\n",
    "                                cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)\n",
    "\n",
    "                img = Image.fromarray(frame_rgb)  # Create an image from the RGB frame\n",
    "                imgtk = ImageTk.PhotoImage(image=img)\n",
    "                self.video_frame.imgtk = imgtk\n",
    "                self.video_frame.configure(image=imgtk)\n",
    "\n",
    "            # Continue updating the frame if the camera is still running\n",
    "            if self.camera_running:\n",
    "                self.video_frame.after(10, self.update_frame)\n",
    "\n",
    "    def classify_body_type(self, landmarks):\n",
    "        # Example classification based on shoulder width\n",
    "        left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value]\n",
    "        right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value]\n",
    "        shoulder_width = np.linalg.norm(\n",
    "            np.array([left_shoulder.x, left_shoulder.y]) -\n",
    "            np.array([right_shoulder.x, right_shoulder.y])\n",
    "        )\n",
    "        if shoulder_width > 0.15:\n",
    "            return \"athletic\"\n",
    "        else:\n",
    "            return \"average\"\n",
    "\n",
    "    def predict_outfit(self):\n",
    "        # Get user inputs\n",
    "        item_type = self.item_type_var.get()\n",
    "        color = self.color_var.get()\n",
    "        style = self.style_var.get()\n",
    "        occasion = self.occasion_var.get()\n",
    "        season = self.season_var.get()\n",
    "\n",
    "        # Ensure all inputs are provided\n",
    "        if not all([item_type, color, style, occasion, season]):\n",
    "            messagebox.showerror(\"Input Error\", \"Please fill all input fields.\")\n",
    "            return\n",
    "\n",
    "        print(f\"Inputs: {item_type}, {color}, {style}, {occasion}, {season}, Body Type: {self.body_type}\")\n",
    "\n",
    "        # Encode features with error handling for unseen labels\n",
    "        try:\n",
    "            if item_type not in le_item_type.classes_:\n",
    "                raise ValueError(f\"Unseen item_type: '{item_type}'\")\n",
    "            item_type_enc = le_item_type.transform([item_type])[0]\n",
    "\n",
    "            if color not in le_color.classes_:\n",
    "                raise ValueError(f\"Unseen color: '{color}'\")\n",
    "            color_enc = le_color.transform([color])[0]\n",
    "\n",
    "            if style not in le_style.classes_:\n",
    "                raise ValueError(f\"Unseen style: '{style}'\")\n",
    "            style_enc = le_style.transform([style])[0]\n",
    "\n",
    "            if occasion not in le_occasion.classes_:\n",
    "                raise ValueError(f\"Unseen occasion: '{occasion}'\")\n",
    "            occasion_enc = le_occasion.transform([occasion])[0]\n",
    "\n",
    "            if season not in le_season.classes_:\n",
    "                raise ValueError(f\"Unseen season: '{season}'\")\n",
    "            season_enc = le_season.transform([season])[0]\n",
    "\n",
    "            if self.body_type not in le_body_type.classes_:\n",
    "                raise ValueError(f\"Unseen body_type: '{self.body_type}'\")\n",
    "            body_type_enc = le_body_type.transform([self.body_type])[0]\n",
    "\n",
    "        except ValueError as e:\n",
    "            messagebox.showerror(\"Encoding Error\", f\"Error in encoding input: {e}\")\n",
    "            return\n",
    "\n",
    "        input_features = [[item_type_enc, color_enc, style_enc, occasion_enc, season_enc, body_type_enc]]\n",
    "\n",
    "        try:\n",
    "            # Select the appropriate model based on item_type\n",
    "            top_items = ['shirt', 't-shirt', 'blouse', 'jacket']\n",
    "            bottom_items = ['pants', 'jeans']\n",
    "\n",
    "            if item_type.lower() in top_items:\n",
    "                prediction = top_model.predict(input_features)\n",
    "            elif item_type.lower() in bottom_items:\n",
    "                prediction = bottom_model.predict(input_features)\n",
    "            else:\n",
    "                raise ValueError(f\"Item type '{item_type}' does not belong to top or bottom categories.\")\n",
    "\n",
    "            recommended_combination = le_combination.inverse_transform(prediction)[0]\n",
    "\n",
    "            # Extracting the footwear options and limiting to one\n",
    "            recommended_items = [item.strip() for item in recommended_combination.split(',')]  # Split on commas\n",
    "            footwear_items = [item for item in recommended_items if 'shoe' in item.lower() or 'sneaker' in item.lower() or 'heel' in item.lower()]  # Filter footwear\n",
    "\n",
    "            # Select only the first footwear option and remove duplicates\n",
    "            unique_items = set(recommended_items)  # Create a unique set of items\n",
    "            chosen_footwear = footwear_items[0] if footwear_items else ''  # If there are no footwear options, leave it empty\n",
    "\n",
    "            # Form the final recommendation without multiple footwear options\n",
    "            final_recommendation = ', '.join([item for item in unique_items if item not in footwear_items])\n",
    "            if chosen_footwear:\n",
    "                final_recommendation += f\", {chosen_footwear}\"  # Add the single footwear option if it exists\n",
    "\n",
    "            self.output_label.config(text=f\"Recommended Combination: {final_recommendation}\")\n",
    "        except Exception as e:\n",
    "            messagebox.showerror(\"Prediction Error\", f\"Error in making prediction: {e}\")\n",
    "\n",
    "    def quit_app(self):\n",
    "        # Stop the camera if running\n",
    "        self.stop_camera()\n",
    "\n",
    "        # Close the Tkinter window\n",
    "        self.root.quit()\n",
    "        self.root.destroy()\n",
    "\n",
    "# Create the application window\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = WardrobeApp(root)\n",
    "    root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cc49e45-e0f4-450f-8d4d-0e7e5397dfcd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b55883d4-733d-48f4-a3a4-20313ba89f34",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
